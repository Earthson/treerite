(function() {var implementors = {};
implementors["ndarray"] = [{"text":"impl&lt;'a, A:&nbsp;Debug, S, D:&nbsp;Dimension&gt; Debug for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = A&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug&gt; Debug for OwnedRepr&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl Debug for ErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for ShapeError","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Debug&gt; Debug for Indices&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Debug, D:&nbsp;Debug&gt; Debug for AxisIter&lt;'a, A, D&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Slice","synthetic":false,"types":[]},{"text":"impl Debug for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug + ?Sized, D:&nbsp;Debug + Dimension&gt; Debug for SliceInfo&lt;T, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Parts:&nbsp;Debug, D:&nbsp;Debug&gt; Debug for Zip&lt;Parts, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for FoldWhile&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, D:&nbsp;Debug&gt; Debug for Axes&lt;'a, D&gt;","synthetic":false,"types":[]},{"text":"impl Debug for AxisDescription","synthetic":false,"types":[]},{"text":"impl Debug for Axis","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Debug for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for IxDynImpl","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug&gt; Debug for OwnedArcRepr&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Debug&gt; Debug for Shape&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Debug&gt; Debug for StrideShape&lt;D&gt;","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Debug for ParseComplexError&lt;E&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Debug&gt; Debug for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_traits"] = [{"text":"impl Debug for FloatErrorKind","synthetic":false,"types":[]},{"text":"impl Debug for ParseFloatError","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Debug for TokenStream","synthetic":false,"types":[]},{"text":"impl Debug for LexError","synthetic":false,"types":[]},{"text":"impl Debug for Span","synthetic":false,"types":[]},{"text":"impl Debug for TokenTree","synthetic":false,"types":[]},{"text":"impl Debug for Delimiter","synthetic":false,"types":[]},{"text":"impl Debug for Group","synthetic":false,"types":[]},{"text":"impl Debug for Spacing","synthetic":false,"types":[]},{"text":"impl Debug for Punct","synthetic":false,"types":[]},{"text":"impl Debug for Ident","synthetic":false,"types":[]},{"text":"impl Debug for Literal","synthetic":false,"types":[]},{"text":"impl Debug for IntoIter","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;'a&gt; Debug for ParseBuffer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for Error","synthetic":false,"types":[]}];
implementors["treerite"] = [{"text":"impl Debug for TreeRiteError","synthetic":false,"types":[]},{"text":"impl Debug for DataType","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()